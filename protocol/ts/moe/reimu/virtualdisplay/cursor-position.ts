// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class CursorPosition {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CursorPosition {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCursorPosition(bb:flatbuffers.ByteBuffer, obj?:CursorPosition):CursorPosition {
  return (obj || new CursorPosition()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCursorPosition(bb:flatbuffers.ByteBuffer, obj?:CursorPosition):CursorPosition {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CursorPosition()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

visible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startCursorPosition(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldInt32(0, x, 0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldInt32(1, y, 0);
}

static addVisible(builder:flatbuffers.Builder, visible:boolean) {
  builder.addFieldInt8(2, +visible, +false);
}

static endCursorPosition(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCursorPosition(builder:flatbuffers.Builder, x:number, y:number, visible:boolean):flatbuffers.Offset {
  CursorPosition.startCursorPosition(builder);
  CursorPosition.addX(builder, x);
  CursorPosition.addY(builder, y);
  CursorPosition.addVisible(builder, visible);
  return CursorPosition.endCursorPosition(builder);
}
}
