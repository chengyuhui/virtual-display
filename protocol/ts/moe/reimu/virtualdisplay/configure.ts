// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CodecData } from '../../../moe/reimu/virtualdisplay/codec-data.js';


export class Configure {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Configure {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConfigure(bb:flatbuffers.ByteBuffer, obj?:Configure):Configure {
  return (obj || new Configure()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConfigure(bb:flatbuffers.ByteBuffer, obj?:Configure):Configure {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Configure()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

width():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

codecData(index: number, obj?:CodecData):CodecData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new CodecData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

codecDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startConfigure(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldInt32(0, width, 0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldInt32(1, height, 0);
}

static addCodecData(builder:flatbuffers.Builder, codecDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, codecDataOffset, 0);
}

static createCodecDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCodecDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endConfigure(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConfigure(builder:flatbuffers.Builder, width:number, height:number, codecDataOffset:flatbuffers.Offset):flatbuffers.Offset {
  Configure.startConfigure(builder);
  Configure.addWidth(builder, width);
  Configure.addHeight(builder, height);
  Configure.addCodecData(builder, codecDataOffset);
  return Configure.endConfigure(builder);
}
}
