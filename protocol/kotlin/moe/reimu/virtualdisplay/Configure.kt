// automatically generated by the FlatBuffers compiler, do not modify

package moe.reimu.virtualdisplay

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class Configure : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Configure {
        __init(_i, _bb)
        return this
    }
    val width : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val height : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    fun codecData(j: Int) : moe.reimu.virtualdisplay.CodecData? = codecData(moe.reimu.virtualdisplay.CodecData(), j)
    fun codecData(obj: moe.reimu.virtualdisplay.CodecData, j: Int) : moe.reimu.virtualdisplay.CodecData? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val codecDataLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_21()
        fun getRootAsConfigure(_bb: ByteBuffer): Configure = getRootAsConfigure(_bb, Configure())
        fun getRootAsConfigure(_bb: ByteBuffer, obj: Configure): Configure {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createConfigure(builder: FlatBufferBuilder, width: Int, height: Int, codecDataOffset: Int) : Int {
            builder.startTable(3)
            addCodecData(builder, codecDataOffset)
            addHeight(builder, height)
            addWidth(builder, width)
            return endConfigure(builder)
        }
        fun startConfigure(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addWidth(builder: FlatBufferBuilder, width: Int) = builder.addInt(0, width, 0)
        fun addHeight(builder: FlatBufferBuilder, height: Int) = builder.addInt(1, height, 0)
        fun addCodecData(builder: FlatBufferBuilder, codecData: Int) = builder.addOffset(2, codecData, 0)
        fun createCodecDataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCodecDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endConfigure(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
