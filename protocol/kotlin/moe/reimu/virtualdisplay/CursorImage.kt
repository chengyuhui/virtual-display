// automatically generated by the FlatBuffers compiler, do not modify

package moe.reimu.virtualdisplay

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class CursorImage : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : CursorImage {
        __init(_i, _bb)
        return this
    }
    val crc32 : UInt
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    fun png(j: Int) : UByte {
        val o = __offset(6)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val pngLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val pngAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun pngInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_21()
        fun getRootAsCursorImage(_bb: ByteBuffer): CursorImage = getRootAsCursorImage(_bb, CursorImage())
        fun getRootAsCursorImage(_bb: ByteBuffer, obj: CursorImage): CursorImage {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createCursorImage(builder: FlatBufferBuilder, crc32: UInt, pngOffset: Int) : Int {
            builder.startTable(2)
            addPng(builder, pngOffset)
            addCrc32(builder, crc32)
            return endCursorImage(builder)
        }
        fun startCursorImage(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addCrc32(builder: FlatBufferBuilder, crc32: UInt) = builder.addInt(0, crc32.toInt(), 0)
        fun addPng(builder: FlatBufferBuilder, png: Int) = builder.addOffset(1, png, 0)
        fun createPngVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startPngVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun endCursorImage(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
