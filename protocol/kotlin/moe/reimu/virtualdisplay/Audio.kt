// automatically generated by the FlatBuffers compiler, do not modify

package moe.reimu.virtualdisplay

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class Audio : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Audio {
        __init(_i, _bb)
        return this
    }
    val timestamp : ULong
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getLong(o + bb_pos).toULong() else 0UL
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_21()
        fun getRootAsAudio(_bb: ByteBuffer): Audio = getRootAsAudio(_bb, Audio())
        fun getRootAsAudio(_bb: ByteBuffer, obj: Audio): Audio {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAudio(builder: FlatBufferBuilder, timestamp: ULong) : Int {
            builder.startTable(1)
            addTimestamp(builder, timestamp)
            return endAudio(builder)
        }
        fun startAudio(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addTimestamp(builder: FlatBufferBuilder, timestamp: ULong) = builder.addLong(0, timestamp.toLong(), 0)
        fun endAudio(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
