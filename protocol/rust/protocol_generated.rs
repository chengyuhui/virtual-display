// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod moe {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod reimu {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod virtualdisplay {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_COMMAND: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_COMMAND: u8 = 6;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_COMMAND: [Command; 7] = [
  Command::NONE,
  Command::Video,
  Command::Audio,
  Command::Timestamp,
  Command::Configure,
  Command::CursorPosition,
  Command::CursorImage,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Command(pub u8);
#[allow(non_upper_case_globals)]
impl Command {
  pub const NONE: Self = Self(0);
  pub const Video: Self = Self(1);
  pub const Audio: Self = Self(2);
  pub const Timestamp: Self = Self(3);
  pub const Configure: Self = Self(4);
  pub const CursorPosition: Self = Self(5);
  pub const CursorImage: Self = Self(6);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 6;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::Video,
    Self::Audio,
    Self::Timestamp,
    Self::Configure,
    Self::CursorPosition,
    Self::CursorImage,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::Video => Some("Video"),
      Self::Audio => Some("Audio"),
      Self::Timestamp => Some("Timestamp"),
      Self::Configure => Some("Configure"),
      Self::CursorPosition => Some("CursorPosition"),
      Self::CursorImage => Some("CursorImage"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Command {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Command {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Command {
    type Output = Command;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Command {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Command {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Command {}
pub struct CommandUnionTableOffset {}

pub enum PacketOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Packet<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Packet<'a> {
  type Inner = Packet<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Packet<'a> {
  pub const VT_COMMAND_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_COMMAND: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Packet { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PacketArgs
  ) -> flatbuffers::WIPOffset<Packet<'bldr>> {
    let mut builder = PacketBuilder::new(_fbb);
    if let Some(x) = args.command { builder.add_command(x); }
    builder.add_command_type(args.command_type);
    builder.finish()
  }


  #[inline]
  pub fn command_type(&self) -> Command {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Command>(Packet::VT_COMMAND_TYPE, Some(Command::NONE)).unwrap()}
  }
  #[inline]
  pub fn command(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Packet::VT_COMMAND, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn command_as_video(&self) -> Option<Video<'a>> {
    if self.command_type() == Command::Video {
      self.command().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Video::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn command_as_audio(&self) -> Option<Audio<'a>> {
    if self.command_type() == Command::Audio {
      self.command().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Audio::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn command_as_timestamp(&self) -> Option<Timestamp<'a>> {
    if self.command_type() == Command::Timestamp {
      self.command().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Timestamp::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn command_as_configure(&self) -> Option<Configure<'a>> {
    if self.command_type() == Command::Configure {
      self.command().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Configure::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn command_as_cursor_position(&self) -> Option<CursorPosition<'a>> {
    if self.command_type() == Command::CursorPosition {
      self.command().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { CursorPosition::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn command_as_cursor_image(&self) -> Option<CursorImage<'a>> {
    if self.command_type() == Command::CursorImage {
      self.command().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { CursorImage::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Packet<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<Command, _>("command_type", Self::VT_COMMAND_TYPE, "command", Self::VT_COMMAND, false, |key, v, pos| {
        match key {
          Command::Video => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Video>>("Command::Video", pos),
          Command::Audio => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Audio>>("Command::Audio", pos),
          Command::Timestamp => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Timestamp>>("Command::Timestamp", pos),
          Command::Configure => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Configure>>("Command::Configure", pos),
          Command::CursorPosition => v.verify_union_variant::<flatbuffers::ForwardsUOffset<CursorPosition>>("Command::CursorPosition", pos),
          Command::CursorImage => v.verify_union_variant::<flatbuffers::ForwardsUOffset<CursorImage>>("Command::CursorImage", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct PacketArgs {
    pub command_type: Command,
    pub command: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for PacketArgs {
  #[inline]
  fn default() -> Self {
    PacketArgs {
      command_type: Command::NONE,
      command: None,
    }
  }
}

pub struct PacketBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PacketBuilder<'a, 'b> {
  #[inline]
  pub fn add_command_type(&mut self, command_type: Command) {
    self.fbb_.push_slot::<Command>(Packet::VT_COMMAND_TYPE, command_type, Command::NONE);
  }
  #[inline]
  pub fn add_command(&mut self, command: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Packet::VT_COMMAND, command);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PacketBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Packet<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Packet<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Packet");
      ds.field("command_type", &self.command_type());
      match self.command_type() {
        Command::Video => {
          if let Some(x) = self.command_as_video() {
            ds.field("command", &x)
          } else {
            ds.field("command", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Command::Audio => {
          if let Some(x) = self.command_as_audio() {
            ds.field("command", &x)
          } else {
            ds.field("command", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Command::Timestamp => {
          if let Some(x) = self.command_as_timestamp() {
            ds.field("command", &x)
          } else {
            ds.field("command", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Command::Configure => {
          if let Some(x) = self.command_as_configure() {
            ds.field("command", &x)
          } else {
            ds.field("command", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Command::CursorPosition => {
          if let Some(x) = self.command_as_cursor_position() {
            ds.field("command", &x)
          } else {
            ds.field("command", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Command::CursorImage => {
          if let Some(x) = self.command_as_cursor_image() {
            ds.field("command", &x)
          } else {
            ds.field("command", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("command", &x)
        },
      };
      ds.finish()
  }
}
pub enum VideoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Video<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Video<'a> {
  type Inner = Video<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Video<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Video { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args VideoArgs
  ) -> flatbuffers::WIPOffset<Video<'bldr>> {
    let mut builder = VideoBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Video::VT_TIMESTAMP, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Video<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .finish();
    Ok(())
  }
}
pub struct VideoArgs {
    pub timestamp: u64,
}
impl<'a> Default for VideoArgs {
  #[inline]
  fn default() -> Self {
    VideoArgs {
      timestamp: 0,
    }
  }
}

pub struct VideoBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> VideoBuilder<'a, 'b> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(Video::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> VideoBuilder<'a, 'b> {
    let start = _fbb.start_table();
    VideoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Video<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Video<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Video");
      ds.field("timestamp", &self.timestamp());
      ds.finish()
  }
}
pub enum AudioOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Audio<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Audio<'a> {
  type Inner = Audio<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Audio<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Audio { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AudioArgs
  ) -> flatbuffers::WIPOffset<Audio<'bldr>> {
    let mut builder = AudioBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Audio::VT_TIMESTAMP, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Audio<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .finish();
    Ok(())
  }
}
pub struct AudioArgs {
    pub timestamp: u64,
}
impl<'a> Default for AudioArgs {
  #[inline]
  fn default() -> Self {
    AudioArgs {
      timestamp: 0,
    }
  }
}

pub struct AudioBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AudioBuilder<'a, 'b> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(Audio::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AudioBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AudioBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Audio<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Audio<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Audio");
      ds.field("timestamp", &self.timestamp());
      ds.finish()
  }
}
pub enum TimestampOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Timestamp<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Timestamp<'a> {
  type Inner = Timestamp<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Timestamp<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Timestamp { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TimestampArgs
  ) -> flatbuffers::WIPOffset<Timestamp<'bldr>> {
    let mut builder = TimestampBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Timestamp::VT_TIMESTAMP, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Timestamp<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .finish();
    Ok(())
  }
}
pub struct TimestampArgs {
    pub timestamp: u64,
}
impl<'a> Default for TimestampArgs {
  #[inline]
  fn default() -> Self {
    TimestampArgs {
      timestamp: 0,
    }
  }
}

pub struct TimestampBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TimestampBuilder<'a, 'b> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(Timestamp::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TimestampBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TimestampBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Timestamp<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Timestamp<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Timestamp");
      ds.field("timestamp", &self.timestamp());
      ds.finish()
  }
}
pub enum ConfigureOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Configure<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Configure<'a> {
  type Inner = Configure<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Configure<'a> {
  pub const VT_WIDTH: flatbuffers::VOffsetT = 4;
  pub const VT_HEIGHT: flatbuffers::VOffsetT = 6;
  pub const VT_CODEC_DATA: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Configure { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ConfigureArgs<'args>
  ) -> flatbuffers::WIPOffset<Configure<'bldr>> {
    let mut builder = ConfigureBuilder::new(_fbb);
    if let Some(x) = args.codec_data { builder.add_codec_data(x); }
    builder.add_height(args.height);
    builder.add_width(args.width);
    builder.finish()
  }


  #[inline]
  pub fn width(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Configure::VT_WIDTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn height(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Configure::VT_HEIGHT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn codec_data(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CodecData<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CodecData>>>>(Configure::VT_CODEC_DATA, None)}
  }
}

impl flatbuffers::Verifiable for Configure<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("width", Self::VT_WIDTH, false)?
     .visit_field::<i32>("height", Self::VT_HEIGHT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<CodecData>>>>("codec_data", Self::VT_CODEC_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct ConfigureArgs<'a> {
    pub width: i32,
    pub height: i32,
    pub codec_data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CodecData<'a>>>>>,
}
impl<'a> Default for ConfigureArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConfigureArgs {
      width: 0,
      height: 0,
      codec_data: None,
    }
  }
}

pub struct ConfigureBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ConfigureBuilder<'a, 'b> {
  #[inline]
  pub fn add_width(&mut self, width: i32) {
    self.fbb_.push_slot::<i32>(Configure::VT_WIDTH, width, 0);
  }
  #[inline]
  pub fn add_height(&mut self, height: i32) {
    self.fbb_.push_slot::<i32>(Configure::VT_HEIGHT, height, 0);
  }
  #[inline]
  pub fn add_codec_data(&mut self, codec_data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<CodecData<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Configure::VT_CODEC_DATA, codec_data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ConfigureBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ConfigureBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Configure<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Configure<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Configure");
      ds.field("width", &self.width());
      ds.field("height", &self.height());
      ds.field("codec_data", &self.codec_data());
      ds.finish()
  }
}
pub enum CursorPositionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CursorPosition<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CursorPosition<'a> {
  type Inner = CursorPosition<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CursorPosition<'a> {
  pub const VT_X: flatbuffers::VOffsetT = 4;
  pub const VT_Y: flatbuffers::VOffsetT = 6;
  pub const VT_VISIBLE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CursorPosition { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args CursorPositionArgs
  ) -> flatbuffers::WIPOffset<CursorPosition<'bldr>> {
    let mut builder = CursorPositionBuilder::new(_fbb);
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.add_visible(args.visible);
    builder.finish()
  }


  #[inline]
  pub fn x(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CursorPosition::VT_X, Some(0)).unwrap()}
  }
  #[inline]
  pub fn y(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CursorPosition::VT_Y, Some(0)).unwrap()}
  }
  #[inline]
  pub fn visible(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CursorPosition::VT_VISIBLE, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CursorPosition<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("x", Self::VT_X, false)?
     .visit_field::<i32>("y", Self::VT_Y, false)?
     .visit_field::<bool>("visible", Self::VT_VISIBLE, false)?
     .finish();
    Ok(())
  }
}
pub struct CursorPositionArgs {
    pub x: i32,
    pub y: i32,
    pub visible: bool,
}
impl<'a> Default for CursorPositionArgs {
  #[inline]
  fn default() -> Self {
    CursorPositionArgs {
      x: 0,
      y: 0,
      visible: false,
    }
  }
}

pub struct CursorPositionBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CursorPositionBuilder<'a, 'b> {
  #[inline]
  pub fn add_x(&mut self, x: i32) {
    self.fbb_.push_slot::<i32>(CursorPosition::VT_X, x, 0);
  }
  #[inline]
  pub fn add_y(&mut self, y: i32) {
    self.fbb_.push_slot::<i32>(CursorPosition::VT_Y, y, 0);
  }
  #[inline]
  pub fn add_visible(&mut self, visible: bool) {
    self.fbb_.push_slot::<bool>(CursorPosition::VT_VISIBLE, visible, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CursorPositionBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CursorPositionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CursorPosition<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CursorPosition<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CursorPosition");
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("visible", &self.visible());
      ds.finish()
  }
}
pub enum CursorImageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CursorImage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CursorImage<'a> {
  type Inner = CursorImage<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CursorImage<'a> {
  pub const VT_CRC32: flatbuffers::VOffsetT = 4;
  pub const VT_PNG: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CursorImage { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args CursorImageArgs<'args>
  ) -> flatbuffers::WIPOffset<CursorImage<'bldr>> {
    let mut builder = CursorImageBuilder::new(_fbb);
    if let Some(x) = args.png { builder.add_png(x); }
    builder.add_crc32(args.crc32);
    builder.finish()
  }


  #[inline]
  pub fn crc32(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(CursorImage::VT_CRC32, Some(0)).unwrap()}
  }
  #[inline]
  pub fn png(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(CursorImage::VT_PNG, None)}
  }
}

impl flatbuffers::Verifiable for CursorImage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("crc32", Self::VT_CRC32, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("png", Self::VT_PNG, false)?
     .finish();
    Ok(())
  }
}
pub struct CursorImageArgs<'a> {
    pub crc32: u32,
    pub png: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for CursorImageArgs<'a> {
  #[inline]
  fn default() -> Self {
    CursorImageArgs {
      crc32: 0,
      png: None,
    }
  }
}

pub struct CursorImageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CursorImageBuilder<'a, 'b> {
  #[inline]
  pub fn add_crc32(&mut self, crc32: u32) {
    self.fbb_.push_slot::<u32>(CursorImage::VT_CRC32, crc32, 0);
  }
  #[inline]
  pub fn add_png(&mut self, png: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CursorImage::VT_PNG, png);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CursorImageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CursorImageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CursorImage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CursorImage<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CursorImage");
      ds.field("crc32", &self.crc32());
      ds.field("png", &self.png());
      ds.finish()
  }
}
pub enum CodecDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CodecData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CodecData<'a> {
  type Inner = CodecData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CodecData<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_DATA: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CodecData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args CodecDataArgs<'args>
  ) -> flatbuffers::WIPOffset<CodecData<'bldr>> {
    let mut builder = CodecDataBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CodecData::VT_NAME, None)}
  }
  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(CodecData::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for CodecData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct CodecDataArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for CodecDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    CodecDataArgs {
      name: None,
      data: None,
    }
  }
}

pub struct CodecDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CodecDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CodecData::VT_NAME, name);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CodecData::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CodecDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CodecDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CodecData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CodecData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CodecData");
      ds.field("name", &self.name());
      ds.field("data", &self.data());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Packet`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_unchecked`.
pub fn root_as_packet(buf: &[u8]) -> Result<Packet, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Packet>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Packet` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_packet_unchecked`.
pub fn size_prefixed_root_as_packet(buf: &[u8]) -> Result<Packet, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Packet>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Packet` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_unchecked`.
pub fn root_as_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Packet<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Packet<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Packet` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_packet_unchecked`.
pub fn size_prefixed_root_as_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Packet<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Packet<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Packet and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Packet`.
pub unsafe fn root_as_packet_unchecked(buf: &[u8]) -> Packet {
  flatbuffers::root_unchecked::<Packet>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Packet and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Packet`.
pub unsafe fn size_prefixed_root_as_packet_unchecked(buf: &[u8]) -> Packet {
  flatbuffers::size_prefixed_root_unchecked::<Packet>(buf)
}
#[inline]
pub fn finish_packet_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Packet<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_packet_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Packet<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod virtualdisplay
}  // pub mod reimu
}  // pub mod moe

